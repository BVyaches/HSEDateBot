import types

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from SQL_funcs import *
from initialization import bot
from keyboards import *
from verification import check_hse_mail, SendVerificationCode

# –¢—É—Ç –ø–æ —Ç–∑ –ø–æ—Ä—è–¥–æ–∫ –¥—Ä—É–≥–æ–π, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –∏–º—è, —Ñ–æ—Ç–æ, –æ —Å–µ–±–µ
# –¢–∞–∫ —á—Ç–æ —è (–í–∏—Ç–∞–ª–∏–π) —Ç–µ–±–µ –ø–æ–º–µ–Ω—è–ª –ø–æ—Ä—è–¥–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ def register_handler_find_pair
# –ù–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–µ—Ç—Å—è :)

"""
                name TEXT,'
               'gender TEXT,'
               'want_to_find TEXT,'
               'age INTEGER,'
               'faculty TEXT,'
               'photo TEXT,'
               'about TEXT,'
               'email TEXT,'
"""


class RegisterUser(StatesGroup):
    waiting_name = State()
    waiting_gender = State()
    waiting_want_to_find = State()
    waiting_age = State()
    waiting_faculty = State()
    waiting_photo = State()
    waiting_about = State()
    waiting_email = State()
    waiting_code = State()


class VerUser(StatesGroup):
    is_verified = State()


async def register_user_start(message: types.Message):
    await message.answer('üìå–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üìå',
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_name.set() # –ü–æ–º–µ–Ω—è–π –ø–æ—Ä—è–¥–æ–∫!


async def register_user_name(message: types.Message, state: FSMContext):
    await state.update_data(waiting_name=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏ –≤–∞—à –ø–æ–ª', reply_markup=await gender_keyboard())
    await RegisterUser.waiting_gender.set()


async def register_user_gender(message: types.Message, state: FSMContext):
    gender = message.text
    if gender not in ['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞']: # –î–ª—è –∫–Ω–æ–ø–æ–∫: üßëüèª‚Äç–ü–∞—Ä–µ–Ω—å, üë©üèª‚Äçü¶±–î–µ–≤—É—à–∫–∞
        await message.answer(
            '‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ‚ùóÔ∏è',
            reply_markup=await gender_keyboard())
        return True

    if gender == '–ü–∞—Ä–µ–Ω—å':
        gender = 'm'
    else:
        gender = 'f'
    await state.update_data(waiting_gender=gender)

    if gender == 'f':
        await state.update_data(waiting_want_to_find='m')
    else:
        await state.update_data(waiting_want_to_find='f')

    await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?',
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_age.set()


async def register_user_age(message: types.Message, state: FSMContext):
    age = message.text

    if not age.isnumeric():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ')
        return True

    await state.update_data(waiting_age=int(age))

    await message.answer('üéì–¢–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?üéì')

    await bot.send_message(message.from_user.id, await state.get_data())
    await RegisterUser.waiting_faculty.set()


async def register_user_faculty(message: types.Message, state: FSMContext):
    faculty = message.text
    await state.update_data(waiting_faculty=faculty)
    await message.answer('üì∏–û—Å—Ç–∞–≤—å —Ñ–æ—Ç–æ—á–∫—É –¥–ª—è –∞–Ω–∫–µ—Ç—ãüì∏')
    await RegisterUser.waiting_photo.set()


async def register_user_photo(message: types.Message, state: FSMContext):
    photo = message.photo[0].file_id
    await RegisterUser.waiting_about.set()

    await state.update_data(waiting_photo=photo)
    await message.answer('‚úèÔ∏è–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–û–¥–∏–Ω-–¥–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)‚úèÔ∏è')


async def register_user_about(message: types.Message, state: FSMContext):
    about = message.text
    await state.update_data(waiting_about=about)
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é @hse –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç –í–®–≠')
    await RegisterUser.waiting_email.set()


async def register_user_email(message: types.Message, state: FSMContext):
    email = message.text
    if await check_hse_mail(email) is None:
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –ø–æ—á—Ç—É —Å –¥–æ–º–µ–Ω–æ–º @hse')
        return True

    code = await SendVerificationCode(email)
    await state.update_data(waiting_code=code)
    await message.answer(
        '–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ –∫–æ–¥ –≤ –±–æ—Ç —Å–∫–æ—Ä–µ–µüòâ.\n'
        '–õ–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É —Å–ø–∞–º üóë', reply_markup=await email_keyboard())
    await RegisterUser.waiting_code.set()


async def register_user_code(message: types.Message, state: FSMContext):
    entered_code = message.text
    verification = await state.get_data()
    verification_code = verification['waiting_code']
    if entered_code != verification_code:
        await message.answer(
            '–ü–æ—Ö–æ–∂–µ, –≤–≤–µ–¥–µ–Ω –Ω–µ —Ç–æ—Ç –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É')
        return True
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù—É –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ–ºüòé')
    await add_user(*await state.get_data())
    await VerUser.is_verified.set()


def register_handler_find_pair(dp: Dispatcher):
    dp.register_message_handler(register_user_start, Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–æ –Ω–∞–¥–ø–∏—Å—å –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è?
                                state='*')
    dp.register_message_handler(register_user_gender,
                                state=RegisterUser.waiting_gender)
    dp.register_message_handler(register_user_age,
                                state=RegisterUser.waiting_age)
    dp.register_message_handler(register_user_faculty,
                                state=RegisterUser.waiting_faculty)
    dp.register_message_handler(register_user_name,                     # –î–∞, –∏–º—è —Ç–µ–ø–µ—Ä—å —á–µ—Ç–≤—ë—Ä—Ç–æ–µ
                                state=RegisterUser.waiting_name)
    dp.register_message_handler(register_user_photo,
                                state=RegisterUser.waiting_photo,
                                content_types=['photo'])
    dp.register_message_handler(register_user_about,
                                state=RegisterUser.waiting_about)
    dp.register_message_handler(register_user_email,
                                state=RegisterUser.waiting_email)
    dp.register_message_handler(register_user_email,
                                Text(equals='–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π email'),
                                state=RegisterUser.waiting_code)
    dp.register_message_handler(register_user_code,
                                state=RegisterUser.waiting_code)
