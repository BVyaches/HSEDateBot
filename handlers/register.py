from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import aiogram.utils.markdown as fmt
from SQL_funcs import *
from formats import showing_user
from handlers.states import VerUser, RegisterUser, ProfileViewer, LoveLetter, DeactivateProfile
from keyboards import *
from initialization import dp

"""
                name TEXT,'
               'gender TEXT,'
               'want_to_find TEXT,'
               'age INTEGER,'
               'faculty TEXT,'
               'university TEXT'
               'photo TEXT,'
               'about TEXT,'
"""


@dp.message_handler(Text(equals='–ê–Ω–∫–µ—Ç–∞ —Å –Ω—É–ª—è‚úè'), state=VerUser.is_verified)
@dp.message_handler(Text(equals='–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–ºüòº'), state=VerUser.not_verified)
async def register_user_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(fmt.bold('üìå–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üìå'),
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_name.set()


@dp.message_handler(state=RegisterUser.waiting_name)
async def register_user_name(message: types.Message, state: FSMContext):
    await state.update_data(waiting_name=message.text)
    await message.answer(fmt.bold('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª'), reply_markup=await gender_keyboard())
    await RegisterUser.waiting_gender.set()


@dp.message_handler(state=RegisterUser.waiting_gender)
async def register_user_gender(message: types.Message, state: FSMContext):
    gender = message.text
    if gender not in ['üßëüèª‚Äç–ü–∞—Ä–µ–Ω—å', 'üë©üèª‚Äçü¶±–î–µ–≤—É—à–∫–∞']:
        await message.answer(
            fmt.bold('‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ‚ùóÔ∏è'),
            reply_markup=await gender_keyboard())
        return True

    if gender == 'üßëüèª‚Äç–ü–∞—Ä–µ–Ω—å':
        gender = 'm'
    else:
        gender = 'f'
    await state.update_data(waiting_gender=gender)

    if gender == 'f':
        await state.update_data(waiting_want_to_find='m')
    else:
        await state.update_data(waiting_want_to_find='f')

    await message.answer(fmt.bold('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?'),
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_age.set()


@dp.message_handler(state=RegisterUser.waiting_age)
async def register_user_age(message: types.Message, state: FSMContext):
    age = message.text

    if not age.isnumeric():
        await message.answer(fmt.bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ'))
        return True

    await state.update_data(waiting_age=int(age))

    await message.answer(fmt.bold('üéì–¢–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç?üéì'), reply_markup=types.ReplyKeyboardRemove())

    await RegisterUser.waiting_university.set()


@dp.message_handler(state=RegisterUser.waiting_university)
async def register_user_university(message: types.Message, state: FSMContext):
    university = message.text
    await state.update_data(waiting_university=university)
    await message.answer(fmt.bold('üéì–¢–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?üéì'), reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_faculty.set()


@dp.message_handler(state=RegisterUser.waiting_faculty)
async def register_user_faculty(message: types.Message, state: FSMContext):
    faculty = message.text
    await state.update_data(waiting_faculty=faculty)
    await message.answer(fmt.bold('üì∏–û—Å—Ç–∞–≤—å —Ñ–æ—Ç–æ—á–∫—É –¥–ª—è –∞–Ω–∫–µ—Ç—ãüì∏'), reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_photo.set()


@dp.message_handler(state=RegisterUser.waiting_photo, content_types=['photo'])
@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µüìù'), state=VerUser.is_verified)
async def register_user_photo(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != 'VerUser:is_verified':
        photo = message.photo[0].file_id

        await state.update_data(waiting_photo=photo)

    await message.answer(fmt.bold('‚úèÔ∏è–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–û–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)‚úèÔ∏è'),
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_about.set()


@dp.message_handler(state=RegisterUser.waiting_about)
async def register_user_about(message: types.Message, state: FSMContext):
    about = message.text
    await state.update_data(waiting_about=about)

    user_id = message.from_user.id
    user_data = await get_user_data(user_id)

    if user_data:
        new_data = await state.get_data()
        print(new_data)
        if len(new_data) == 1:
            print()
            new_about = about
            await update_user_about(user_id, new_about)
        else:
            new_data = list(new_data.values())

            await update_user_data(user_id, new_data)
        current_data = await get_user_data(user_id)

        await message.answer(fmt.bold('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:'))
        await message.answer_photo(photo=current_data[5],
                                   caption=await showing_user(current_data))

        await show_menu(message, state)
    else:
        data = await state.get_data()
        data = [message.from_user.id] + list(data.values())
        await add_user(*data)
        await message.answer(fmt.bold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'))
        await show_user_profile(message, state)
        await show_menu(message, state)


@dp.message_handler(Text(equals='–ú–æ—è –∞–Ω–∫–µ—Ç–∞'), state=VerUser.is_verified)
async def show_user_profile(message: types.Message, state: FSMContext):
    await message.answer(fmt.bold('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:'))
    user_data = await get_user_data(message.from_user.id)
    profile_text = await showing_user(user_data)
    await message.answer_photo(user_data[5], profile_text,
                               reply_markup=await user_profile_view_keyboard())


@dp.message_handler(Text(equals='–ù–µ—Ç'), state=DeactivateProfile.waiting_for_approvement)
@dp.message_handler(Text(equals='–ú–µ–Ω—éüìå'), state=VerUser.is_verified)
@dp.message_handler(Text(equals='–ú–µ–Ω—éüìå'), state=ProfileViewer.waiting_response)
@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüìå'), state=LoveLetter.waiting_for_decision)
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(fmt.bold('–ß—Ç–æ –¥–µ–ª–∞–µ–º?üòé'),
                         reply_markup=await main_menu_keyboard())
    await VerUser.is_verified.set()


@dp.message_handler(Text(equals='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüîì'), state=VerUser.is_verified)
async def deactivate_user_profile_start(message: types.Message, state: FSMContext):
    await message.answer(
        fmt.bold('–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. '
                 '–û–¥–Ω–∞–∫–æ —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞–≤ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã\n'
                 '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É?'),
        reply_markup=await agree_keyboard())
    await DeactivateProfile.waiting_for_approvement.set()


@dp.message_handler(Text(equals='–î–∞'), state=DeactivateProfile.waiting_for_approvement)
async def deactivate_user_profile_finish(message: types.Message, state: FSMContext):
    await deactivate_profile(message.from_user.id)
    await message.answer(fmt.bold('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∂–¥—ë–º —Ç–µ–±—è —Å–Ω–æ–≤–∞!'))
    await show_menu(message, state)
