from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import aiogram.utils.markdown as fmt
from SQL_funcs import *
from formats import showing_user
from handlers.states import VerUser, RegisterUser, ProfileViewer, LoveLetter, DeactivateProfile
from keyboards import *
from verification import check_hse_mail, SendVerificationCode

"""
                name TEXT,'
               'gender TEXT,'
               'want_to_find TEXT,'
               'age INTEGER,'
               'faculty TEXT,'
               'photo TEXT,'
               'about TEXT,'
               'email TEXT,'
"""


async def register_user_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(fmt.bold('üìå–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üìå'),
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_name.set()


async def register_user_name(message: types.Message, state: FSMContext):
    await state.update_data(waiting_name=message.text)
    await message.answer(fmt.bold('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª'), reply_markup=await gender_keyboard())
    await RegisterUser.waiting_gender.set()


async def register_user_gender(message: types.Message, state: FSMContext):
    gender = message.text
    if gender not in ['üßëüèª‚Äç–ü–∞—Ä–µ–Ω—å', 'üë©üèª‚Äçü¶±–î–µ–≤—É—à–∫–∞']:
        await message.answer(
            fmt.bold('‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ‚ùóÔ∏è'),
            reply_markup=await gender_keyboard())
        return True

    if gender == 'üßëüèª‚Äç–ü–∞—Ä–µ–Ω—å':
        gender = 'm'
    else:
        gender = 'f'
    await state.update_data(waiting_gender=gender)

    if gender == 'f':
        await state.update_data(waiting_want_to_find='m')
    else:
        await state.update_data(waiting_want_to_find='f')

    await message.answer(fmt.bold('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?'),
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_age.set()


async def register_user_age(message: types.Message, state: FSMContext):
    age = message.text

    if not age.isnumeric():
        await message.answer(fmt.bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ'))
        return True

    await state.update_data(waiting_age=int(age))

    await message.answer(fmt.bold('üéì–¢–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?üéì'), reply_markup=types.ReplyKeyboardRemove())

    await RegisterUser.waiting_faculty.set()


async def register_user_faculty(message: types.Message, state: FSMContext):
    faculty = message.text
    await state.update_data(waiting_faculty=faculty)
    await message.answer(fmt.bold('üì∏–û—Å—Ç–∞–≤—å —Ñ–æ—Ç–æ—á–∫—É –¥–ª—è –∞–Ω–∫–µ—Ç—ãüì∏'), reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_photo.set()


async def register_user_photo(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != 'VerUser:is_verified':
        photo = message.photo[0].file_id

        await state.update_data(waiting_photo=photo)

    await message.answer(fmt.bold('‚úèÔ∏è–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–û–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)‚úèÔ∏è'),
                         reply_markup=types.ReplyKeyboardRemove())
    await RegisterUser.waiting_about.set()


async def register_user_about(message: types.Message, state: FSMContext):
    about = message.text
    await state.update_data(waiting_about=about)

    user_id = message.from_user.id
    user_data = await get_user_data(user_id)

    if user_data:
        new_data = await state.get_data()
        print(new_data)
        if len(new_data) == 1:
            print()
            new_about = about
            await update_user_about(user_id, new_about)
        else:
            new_data = list(new_data.values())

            await update_user_data(user_id, new_data)
        current_data = await get_user_data(user_id)
        await state.finish()
        await message.answer(fmt.bold('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:'))
        await message.answer_photo(photo=current_data[4],
                                   caption=await showing_user(current_data))

        await VerUser.is_verified.set()
        await message.answer(fmt.bold('–ß—Ç–æ –¥–µ–ª–∞–µ–º?üòé'),
                             reply_markup=await main_menu_keyboard())
    else:
        await message.answer(
            fmt.bold('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é @hse –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç –í–®–≠'),
            reply_markup=types.ReplyKeyboardRemove())
        await RegisterUser.waiting_email.set()


async def register_user_email(message: types.Message, state: FSMContext):
    await RegisterUser.waiting_email.set()
    email = message.text
    print(email)
    print(await check_hse_mail(email))
    if await check_hse_mail(email) is None:
        await message.answer(
            fmt.bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é –ø–æ—á—Ç—É —Å –¥–æ–º–µ–Ω–æ–º @hse'))
        return True
    await state.update_data(waiting_email=email)

    code = await SendVerificationCode(email)
    await state.update_data(waiting_code=code)
    await message.answer(
        fmt.bold('–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ –∫–æ–¥ –≤ –±–æ—Ç —Å–∫–æ—Ä–µ–µüòâ.\n'
                 '–õ–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É —Å–ø–∞–º üóë'), reply_markup=await email_keyboard())
    await RegisterUser.waiting_code.set()


async def register_user_code(message: types.Message, state: FSMContext):
    entered_code = message.text
    verification = await state.get_data()
    verification_code = verification['waiting_code']
    if entered_code != verification_code:
        await message.answer(
            fmt.bold('–ü–æ—Ö–æ–∂–µ, –≤–≤–µ–¥–µ–Ω –Ω–µ —Ç–æ—Ç –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É'))
        return True

    data = await state.get_data()
    data = [message.from_user.id] + list(data.values())
    await add_user(*data[:-1])
    await message.answer(fmt.bold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'))
    await show_user_profile(message, state)
    await message.answer(fmt.bold('–ß—Ç–æ –¥–µ–ª–∞–µ–º?üòé'),
                         reply_markup=await main_menu_keyboard())
    await state.finish()
    await VerUser.is_verified.set()


async def show_user_profile(message: types.Message, state: FSMContext):
    await message.answer(fmt.bold('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:'))
    user_data = await get_user_data(message.from_user.id)
    profile_text = await showing_user(user_data)
    await message.answer_photo(user_data[4], profile_text,
                               reply_markup=await user_profile_view_keyboard())


async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(fmt.bold('–ß—Ç–æ –¥–µ–ª–∞–µ–º?üòé'),
                         reply_markup=await main_menu_keyboard())
    await VerUser.is_verified.set()


async def deactivate_user_profile_start(message: types.Message, state: FSMContext):
    await message.answer(
        fmt.bold('–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. '
                 '–û–¥–Ω–∞–∫–æ —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞–≤ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã\n'
                 '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É?'),
        reply_markup=await agree_keyboard())
    await DeactivateProfile.waiting_for_approvement.set()


async def deactivate_user_profile_finish(message: types.Message, state: FSMContext):
    await deactivate_profile(message.from_user.id)
    await message.answer(fmt.bold('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∂–¥—ë–º —Ç–µ–±—è —Å–Ω–æ–≤–∞!'))
    await state.finish()
    await message.answer(fmt.bold('–ß—Ç–æ –¥–µ–ª–∞–µ–º?üòé'),
                         reply_markup=await main_menu_keyboard())
    await VerUser.is_verified.set()


def register_handler_register(dp: Dispatcher):
    dp.register_message_handler(register_user_start,
                                Text(equals='–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–ºüòº'),
                                state=VerUser.not_verified)
    dp.register_message_handler(register_user_name,
                                state=RegisterUser.waiting_name)
    dp.register_message_handler(register_user_gender,
                                state=RegisterUser.waiting_gender)
    dp.register_message_handler(register_user_age,
                                state=RegisterUser.waiting_age)
    dp.register_message_handler(register_user_faculty,
                                state=RegisterUser.waiting_faculty)
    dp.register_message_handler(register_user_photo,
                                state=RegisterUser.waiting_photo,
                                content_types=['photo'])
    dp.register_message_handler(register_user_about,
                                state=RegisterUser.waiting_about)
    dp.register_message_handler(register_user_email,
                                state=RegisterUser.waiting_email)
    dp.register_message_handler(register_user_email,
                                Text(equals='–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π email'),
                                state=RegisterUser.waiting_code)
    dp.register_message_handler(register_user_code,
                                state=RegisterUser.waiting_code)
    dp.register_message_handler(show_user_profile, Text(equals='–ú–æ—è –∞–Ω–∫–µ—Ç–∞'),
                                state=VerUser.is_verified)
    dp.register_message_handler(register_user_start,
                                Text(equals='–ê–Ω–∫–µ—Ç–∞ —Å –Ω—É–ª—è‚úè'),
                                state=VerUser.is_verified)
    dp.register_message_handler(register_user_photo,
                                Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µüìù'),
                                state=VerUser.is_verified),
    dp.register_message_handler(show_menu, Text(equals='–ú–µ–Ω—éüìå'), state=VerUser.is_verified)
    dp.register_message_handler(show_menu, Text(equals='–ú–µ–Ω—éüìå'), state=ProfileViewer.waiting_response)
    dp.register_message_handler(show_menu, Text(equals='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüìå'), state=LoveLetter.waiting_for_decision)
    dp.register_message_handler(deactivate_user_profile_start, Text(equals='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüîì'),
                                state=VerUser.is_verified)
    dp.register_message_handler(deactivate_user_profile_finish, Text(equals='–î–∞'),
                                state=DeactivateProfile.waiting_for_approvement)
    dp.register_message_handler(show_menu, Text(equals='–ù–µ—Ç'),
                                state=DeactivateProfile.waiting_for_approvement)
    # –≤ –∫–æ–ª–ª—ã —Å—Ç–µ–π—Ç *
